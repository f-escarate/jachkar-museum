// SPDX-License-Identifier: MIT
#define GROUP_SIZE 1024

#pragma kernel CSSetIndices
#pragma kernel CSCalcDistances
#pragma kernel CSCalcViewData
#pragma kernel CSUpdateEditData
#pragma kernel CSInitEditData
#pragma kernel CSClearBuffer
#pragma kernel CSInvertBuffer
#pragma kernel CSOrBuffers
#pragma kernel CSSelectionUpdate
#pragma kernel CSExportData

#pragma use_dxc

#include "GaussianSplatting.hlsl"

float4x4 _LocalToWorldMatrix;
float4x4 _WorldToCameraMatrix;
RWStructuredBuffer<uint> _SplatSortDistances;
RWStructuredBuffer<uint> _SplatSortKeys;
uint _SplatCount;

// radix sort etc. friendly, see http://stereopsis.com/radix.html
uint FloatToSortableUint(float f)
{
    uint fu = asuint(f);
    uint mask = -((int)(fu >> 31)) | 0x80000000;
    return fu ^ mask;
}

[numthreads(GROUP_SIZE,1,1)]
void CSSetIndices (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SplatCount)
        return;

    _SplatSortKeys[idx] = idx;
}

[numthreads(GROUP_SIZE,1,1)]
void CSCalcDistances (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SplatCount)
        return;

    uint origIdx = _SplatSortKeys[idx];

    float3 pos = LoadSplatPos(origIdx);
    pos = mul(_LocalToWorldMatrix, float4(pos.xyz, 1)).xyz;
    pos = mul(_WorldToCameraMatrix, float4(pos.xyz, 1)).xyz;

    _SplatSortDistances[idx] = FloatToSortableUint(pos.z);
}

RWStructuredBuffer<SplatViewData> _SplatViewData;

float4x4 _MatrixVP;
float4x4 _MatrixMV;
float4x4 _MatrixP;
float4x4 _MatrixObjectToWorld;
float4x4 _MatrixWorldToObject;
float4 _VecScreenParams;
float4 _VecWorldSpaceCameraPos;

float _SplatScale;
float _SplatOpacityScale;
uint _SHOrder;

RWByteAddressBuffer _SplatSelectedBits;
ByteAddressBuffer _SplatDeletedBits;
uint _SplatBitsValid;

void DecomposeCovariance(float3 cov2d, out float2 v1, out float2 v2)
{
    #if 0 // does not quite give the correct results?

    // https://jsfiddle.net/mattrossman/ehxmtgw6/
    // References:
    // - https://www.youtube.com/watch?v=e50Bj7jn9IQ
    // - https://en.wikipedia.org/wiki/Eigenvalue_algorithm#2%C3%972_matrices
    // - https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html
    float a = cov2d.x;
    float b = cov2d.y;
    float d = cov2d.z;
    float det = a * d - b * b; // matrix is symmetric, so "c" is same as "b"
    float trace = a + d;

    float mean = 0.5 * trace;
    float dist = sqrt(mean * mean - det);

    float lambda1 = mean + dist; // 1st eigenvalue
    float lambda2 = mean - dist; // 2nd eigenvalue

    if (b == 0) {
        // https://twitter.com/the_ross_man/status/1706342719776551360
        if (a > d) v1 = float2(1, 0);
        else v1 = float2(0, 1);
    } else
        v1 = normalize(float2(b, d - lambda2));

    v1.y = -v1.y;
    // The 2nd eigenvector is just a 90 degree rotation of the first since Gaussian axes are orthogonal
    v2 = float2(v1.y, -v1.x);

    // scaling components
    v1 *= sqrt(lambda1);
    v2 *= sqrt(lambda2);

    float radius = 1.5;
    v1 *= radius;
    v2 *= radius;

    #else

    // same as in antimatter15/splat
    float diag1 = cov2d.x, diag2 = cov2d.z, offDiag = cov2d.y;
    float mid = 0.5f * (diag1 + diag2);
    float radius = length(float2((diag1 - diag2) / 2.0, offDiag));
    float lambda1 = mid + radius;
    float lambda2 = max(mid - radius, 0.1);
    float2 diagVec = normalize(float2(offDiag, lambda1 - diag1));
    diagVec.y = -diagVec.y;
    float maxSize = 4096.0;
    v1 = min(sqrt(2.0 * lambda1), maxSize) * diagVec;
    v2 = min(sqrt(2.0 * lambda2), maxSize) * float2(diagVec.y, -diagVec.x);

    #endif
}

[numthreads(GROUP_SIZE,1,1)]
void CSCalcViewData (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SplatCount)
        return;

    SplatData splat = LoadSplatData(idx);
    SplatViewData view = (SplatViewData)0;
    
    float3 centerWorldPos = mul(_MatrixObjectToWorld, float4(splat.pos,1)).xyz;
    float4 centerClipPos = mul(_MatrixVP, float4(centerWorldPos, 1));

    // deleted?
    if (_SplatBitsValid)
    {
        uint wordIdx = idx / 32;
        uint bitIdx = idx & 31;
        uint wordVal = _SplatDeletedBits.Load(wordIdx * 4);
        if (wordVal & (1 << bitIdx))
        {
            centerClipPos.w = 0;
        }
    }

    view.pos = centerClipPos;
    bool behindCam = centerClipPos.w <= 0;
    if (!behindCam)
    {
        float4 boxRot = splat.rot;
        float3 boxSize = splat.scale;

        float3x3 splatRotScaleMat = CalcMatrixFromRotationScale(boxRot, boxSize);

        float3 cov3d0, cov3d1;
        CalcCovariance3D(splatRotScaleMat, cov3d0, cov3d1);
        cov3d0 *= _SplatScale * _SplatScale;
        cov3d1 *= _SplatScale * _SplatScale;
        float3 cov2d = CalcCovariance2D(splat.pos, cov3d0, cov3d1, _MatrixMV, _MatrixP, _VecScreenParams);

        DecomposeCovariance(cov2d, view.axis1, view.axis2);

        float3 worldViewDir = _VecWorldSpaceCameraPos.xyz - centerWorldPos;
        float3 objViewDir = mul((float3x3)_MatrixWorldToObject, worldViewDir);
        objViewDir = normalize(objViewDir);

        half4 col;
        col.rgb = ShadeSH(splat.sh, objViewDir, _SHOrder);
        col.a = min(splat.opacity * _SplatOpacityScale, 65000);
        view.color.x = (f32tof16(col.r) << 16) | f32tof16(col.g);
        view.color.y = (f32tof16(col.b) << 16) | f32tof16(col.a);
    }
    
    _SplatViewData[idx] = view;
}


RWByteAddressBuffer _DstBuffer;
ByteAddressBuffer _SrcBuffer;
uint _BufferSize;
uint _DstBufferValue;

[numthreads(GROUP_SIZE,1,1)]
void CSUpdateEditData (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _BufferSize)
        return;

    uint valSel = _SplatSelectedBits.Load(idx * 4);
    uint valDel = _SplatDeletedBits.Load(idx * 4);
    valSel &= ~valDel; // don't count deleted splats as selected
    if (valSel != 0)
    {
        // update selection bounds
        uint splatIdxStart = idx * 32;
        uint splatIdxEnd = min(splatIdxStart + 32, _SplatCount);
        float3 bmin = 1.0e38;
        float3 bmax = -1.0e38;
        uint mask = 1;
        for (uint sidx = splatIdxStart; sidx < splatIdxEnd; ++sidx, mask <<= 1)
        {
            if (valSel & mask)
            {
                float3 spos = LoadSplatPos(sidx);
                bmin = min(bmin, spos);
                bmax = max(bmax, spos);
            }
        }
        _DstBuffer.InterlockedMin(8, FloatToSortableUint(bmin.x));
        _DstBuffer.InterlockedMin(12, FloatToSortableUint(bmin.y));
        _DstBuffer.InterlockedMin(16, FloatToSortableUint(bmin.z));
        _DstBuffer.InterlockedMax(20, FloatToSortableUint(bmax.x));
        _DstBuffer.InterlockedMax(24, FloatToSortableUint(bmax.y));
        _DstBuffer.InterlockedMax(28, FloatToSortableUint(bmax.z));
    }
    uint sumSel = countbits(valSel);
    uint sumDel = countbits(valDel);
    _DstBuffer.InterlockedAdd(0, sumSel);
    _DstBuffer.InterlockedAdd(4, sumDel);
}

[numthreads(1,1,1)]
void CSInitEditData (uint3 id : SV_DispatchThreadID)
{
    _DstBuffer.Store2(0, uint2(0,0)); // selected + deleted counts
    uint initMin = FloatToSortableUint(1.0e38);
    uint initMax = FloatToSortableUint(-1.0e38);
    _DstBuffer.Store3(8, uint3(initMin, initMin, initMin));
    _DstBuffer.Store3(20, uint3(initMax, initMax, initMax));
}

[numthreads(GROUP_SIZE,1,1)]
void CSClearBuffer (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _BufferSize)
        return;
    _DstBuffer.Store(idx * 4, _DstBufferValue);
}

[numthreads(GROUP_SIZE,1,1)]
void CSInvertBuffer (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _BufferSize)
        return;
    uint v = _DstBuffer.Load(idx * 4);
    _DstBuffer.Store(idx * 4, ~v);
}

[numthreads(GROUP_SIZE,1,1)]
void CSOrBuffers (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _BufferSize)
        return;
    uint a = _SrcBuffer.Load(idx * 4);
    uint b = _DstBuffer.Load(idx * 4);
    _DstBuffer.Store(idx * 4, a | b);
}

float4 _SelectionRect;

[numthreads(GROUP_SIZE,1,1)]
void CSSelectionUpdate (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SplatCount)
        return;

    float3 pos = LoadSplatPos(idx);

    float3 centerWorldPos = mul(_MatrixObjectToWorld, float4(pos,1)).xyz;
    float4 centerClipPos = mul(_MatrixVP, float4(centerWorldPos, 1));
    bool behindCam = centerClipPos.w <= 0;
    if (behindCam)
        return;

    float2 pixelPos = (centerClipPos.xy / centerClipPos.w * float2(0.5, -0.5) + 0.5) * _VecScreenParams.xy;
    if (pixelPos.x < _SelectionRect.x || pixelPos.x > _SelectionRect.z ||
        pixelPos.y < _SelectionRect.y || pixelPos.y > _SelectionRect.w)
    {
        return;
    }
    uint wordIdx = idx / 32;
    uint bitIdx = idx & 31;
    _SplatSelectedBits.InterlockedOr(wordIdx * 4, 1 << bitIdx);
}


struct ExportSplatData
{
    float3 pos;
    float3 nor;
    float3 dc0;
    float4 shR14; float4 shR58; float4 shR9C; float3 shRDF;
    float4 shG14; float4 shG58; float4 shG9C; float3 shGDF;
    float4 shB14; float4 shB58; float4 shB9C; float3 shBDF;
    float opacity;
    float3 scale;
    float4 rot;
};
RWStructuredBuffer<ExportSplatData> _ExportBuffer;

float3 ColorToSH0(float3 col)
{
    return (col - 0.5) / 0.2820948;
}
float InvSigmoid(float v)
{
    return log(v / max(1 - v, 1.0e-6));
}

[numthreads(GROUP_SIZE,1,1)]
void CSExportData (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _SplatCount)
        return;
    SplatData src = LoadSplatData(idx);
    ExportSplatData dst;
    dst.pos = src.pos;
    dst.nor = 0;
    dst.dc0 = ColorToSH0(src.sh.col);
    
    dst.shR14 = float4(src.sh.sh1.r, src.sh.sh2.r, src.sh.sh3.r, src.sh.sh4.r);
    dst.shR58 = float4(src.sh.sh5.r, src.sh.sh6.r, src.sh.sh7.r, src.sh.sh8.r);
    dst.shR9C = float4(src.sh.sh9.r, src.sh.sh10.r, src.sh.sh11.r, src.sh.sh12.r);
    dst.shRDF = float3(src.sh.sh13.r, src.sh.sh14.r, src.sh.sh15.r);
    
    dst.shG14 = float4(src.sh.sh1.g, src.sh.sh2.g, src.sh.sh3.g, src.sh.sh4.g);
    dst.shG58 = float4(src.sh.sh5.g, src.sh.sh6.g, src.sh.sh7.g, src.sh.sh8.g);
    dst.shG9C = float4(src.sh.sh9.g, src.sh.sh10.g, src.sh.sh11.g, src.sh.sh12.g);
    dst.shGDF = float3(src.sh.sh13.g, src.sh.sh14.g, src.sh.sh15.g);
    
    dst.shB14 = float4(src.sh.sh1.b, src.sh.sh2.b, src.sh.sh3.b, src.sh.sh4.b);
    dst.shB58 = float4(src.sh.sh5.b, src.sh.sh6.b, src.sh.sh7.b, src.sh.sh8.b);
    dst.shB9C = float4(src.sh.sh9.b, src.sh.sh10.b, src.sh.sh11.b, src.sh.sh12.b);
    dst.shBDF = float3(src.sh.sh13.b, src.sh.sh14.b, src.sh.sh15.b);
    
    dst.opacity = InvSigmoid(src.opacity);
    dst.scale = log(src.scale);
    dst.rot = src.rot.wxyz;
    
    _ExportBuffer[idx] = dst;
}
